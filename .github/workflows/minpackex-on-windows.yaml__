name: minpackex on Windows
run-name: minpack (multiple Fortran compilers), minpackex (multiple C compilers) on Windows
on:
  push:
    paths-ignore:
      - "**.md"
      - doc/**
  pull_request:
    paths-ignore:
      - "**.md"
      - doc/**

jobs:
  intel-using-minpack-as-cmake-package:
    name: minpackex with Intel toolchain on Windows using minpack as CMake package
    runs-on: windows-latest
    strategy:
      matrix:
        USE_DOWNLOAD: ['OFF']
        CMAKE_BUILD_TYPE: ['Release', 'Debug']
        BUILD_SHARED_LIBS: ['ON', 'OFF']
        BUILD_STATIC_LIBS: ['ON', 'OFF']
        BUILD_TESTS: ['ON', 'OFF']
        C_COMPILER:
          - {VENDOR: 'Intel', CC: '', CXX: ''}
          - {VENDOR: 'MSVC', CC: 'cl', CXX: 'cl'}
          - {VENDOR: 'Clang', CC: 'clang-cl', CXX: 'clang-cl'}
        TOOLCHAIN:
          - {COMPILER: intel, VERSION: '2024.1'}
          - {COMPILER: intel-classic, VERSION: '2021.10'}

        exclude:
          
          - BUILD_SHARED_LIBS: 'OFF'
            BUILD_STATIC_LIBS: 'OFF'
          
          - BUILD_SHARED_LIBS: 'ON'
            BUILD_STATIC_LIBS: 'ON'

    steps:

      - name: Checkout minpack-builder assets
        uses: actions/checkout@v4
        if: ${{ matrix.USE_DOWNLOAD=='OFF' }}
        with:
          repository: luau-project/minpack-builder
          ref: assets-ci-v1
          path: assets
      
      - name: Checkout minpack-builder repository to minpack-builder directory
        uses: actions/checkout@v4
        with:
          repository: luau-project/minpack-builder
          path: minpack-builder
      
      - name: Set environment variables to build and install directories (minpack)
        run: |
          Add-Content $env:GITHUB_ENV "MINPACK_BUILDDIR=$env:RUNNER_TEMP\minpack-build"
          Add-Content $env:GITHUB_ENV "MINPACK_INSTALLDIR=$env:RUNNER_TEMP\minpack-install"
          Add-Content $env:GITHUB_ENV ("MINPACK_PREFIX=" + "$env:RUNNER_TEMP\minpack-install".Replace("\", "/"))

      - name: Download minpack sources
        if: ${{ matrix.USE_DOWNLOAD=='OFF' }}
        run: foreach ($current_file in "disclaimer",  "chkder.f",  "dogleg.f",  "dpmpar.f",  "enorm.f",  "fdjac1.f",  "fdjac2.f",  "hybrd1.f",  "hybrd.f",  "hybrj1.f",  "hybrj.f",  "lmder1.f",  "lmder.f",  "lmdif1.f",  "lmdif.f",  "lmpar.f",  "lmstr1.f",  "lmstr.f",  "qform.f",  "qrfac.f",  "qrsolv.f",  "r1mpyq.f",  "r1updt.f",  "rwupdt.f") { Copy-Item "assets\$current_file" "minpack-builder"; }
      
      - name: Setup both compilers for C and Fortran
        uses: fortran-lang/setup-fortran@v1
        id: setup-fortran
        with:
          compiler: ${{ matrix.TOOLCHAIN.COMPILER }}
          version: ${{ matrix.TOOLCHAIN.VERSION }}
      
      - name: Override C compiler to use ${{ matrix.C_COMPILER.VENDOR }} (${{ matrix.C_COMPILER.CC }})
        if: ${{ matrix.C_COMPILER.VENDOR!='Intel' }}
        run: |
          Add-Content $env:GITHUB_ENV "CC=${{ matrix.C_COMPILER.CC }}"
          Add-Content $env:GITHUB_ENV "CXX=${{ matrix.C_COMPILER.CXX }}"

      - name: Configure the build of minpack
        run: cmake -G "NMake Makefiles" -DBUILD_SHARED_LIBS=${{ matrix.BUILD_SHARED_LIBS }} -DBUILD_STATIC_LIBS=${{ matrix.BUILD_STATIC_LIBS }} -DCMAKE_BUILD_TYPE=${{ matrix.CMAKE_BUILD_TYPE }} -DUSE_DOWNLOAD=${{ matrix.USE_DOWNLOAD }} --install-prefix $env:MINPACK_INSTALLDIR -S minpack-builder -B $env:MINPACK_BUILDDIR
      
      - name: Build minpack
        run: cmake --build $env:MINPACK_BUILDDIR --config ${{ matrix.CMAKE_BUILD_TYPE }}
      
      - name: Install minpack
        run: cmake --install $env:MINPACK_BUILDDIR --config ${{ matrix.CMAKE_BUILD_TYPE }}

      - name: Checkout minpackex repository to minpackex directory
        uses: actions/checkout@v4
        with:
          path: minpackex
      
      - name: Set environment variables to build and install directories (minpackex)
        run: |
          Add-Content $env:GITHUB_ENV "MINPACKEX_BUILDDIR=$env:RUNNER_TEMP\minpackex-build"
          Add-Content $env:GITHUB_ENV "MINPACKEX_INSTALLDIR=$env:RUNNER_TEMP\minpackex-install"

      - name: Configure the build of minpackex
        run: cmake -G "NMake Makefiles" "-DCMAKE_PREFIX_PATH=$env:MINPACK_PREFIX" -DBUILD_TESTING=${{ matrix.BUILD_TESTS }} -DBUILD_SHARED_LIBS=${{ matrix.BUILD_SHARED_LIBS }} -DBUILD_STATIC_LIBS=${{ matrix.BUILD_STATIC_LIBS }} -DCMAKE_BUILD_TYPE=${{ matrix.CMAKE_BUILD_TYPE }} --install-prefix $env:MINPACKEX_INSTALLDIR -S minpackex -B $env:MINPACKEX_BUILDDIR

      - name: Build minpackex
        run: cmake --build $env:MINPACKEX_BUILDDIR --config ${{ matrix.CMAKE_BUILD_TYPE }}
      
      - name: Test minpackex
        run: ctest --test-dir $env:MINPACKEX_BUILDDIR -C ${{ matrix.CMAKE_BUILD_TYPE }}

      - name: Install minpackex
        run: cmake --install $env:MINPACKEX_BUILDDIR --config ${{ matrix.CMAKE_BUILD_TYPE }}

  intel-using-minpack-as-system-library:
    name: minpackex with Intel toolchain on Windows using minpack as system library
    runs-on: windows-latest
    strategy:
      matrix:
        USE_DOWNLOAD: ['OFF']
        CMAKE_BUILD_TYPE: ['Release', 'Debug']
        BUILD_SHARED_LIBS: ['ON', 'OFF']
        BUILD_STATIC_LIBS: ['ON', 'OFF']
        BUILD_TESTS: ['ON', 'OFF']
        C_COMPILER:
          - {VENDOR: 'Intel', CC: '', CXX: ''}
          - {VENDOR: 'MSVC', CC: 'cl', CXX: 'cl'}
          - {VENDOR: 'Clang', CC: 'clang-cl', CXX: 'clang-cl'}
        TOOLCHAIN:
          - {COMPILER: intel, VERSION: '2024.1'}
          - {COMPILER: intel-classic, VERSION: '2021.10'}

        exclude:
          
          - BUILD_SHARED_LIBS: 'OFF'
            BUILD_STATIC_LIBS: 'OFF'
          
          - BUILD_SHARED_LIBS: 'ON'
            BUILD_STATIC_LIBS: 'ON'

    steps:

      - name: Checkout minpack-builder assets
        uses: actions/checkout@v4
        if: ${{ matrix.USE_DOWNLOAD=='OFF' }}
        with:
          repository: luau-project/minpack-builder
          ref: assets-ci-v1
          path: assets
      
      - name: Checkout minpack-builder repository to minpack-builder directory
        uses: actions/checkout@v4
        with:
          repository: luau-project/minpack-builder
          path: minpack-builder
      
      - name: Set environment variables to build and install directories (minpack)
        run: |
          Add-Content $env:GITHUB_ENV "MINPACK_BUILDDIR=$env:RUNNER_TEMP\minpack-build"
          Add-Content $env:GITHUB_ENV "MINPACK_INSTALLDIR=$env:RUNNER_TEMP\minpack-install"
          Add-Content $env:GITHUB_ENV ("minpack_dep_inc_dir=" + "$env:RUNNER_TEMP\minpack-install\include".Replace("\", "/"))
          Add-Content $env:GITHUB_ENV ("minpack_dep_lib_dir=" + "$env:RUNNER_TEMP\minpack-install\lib".Replace("\", "/"))

      - name: Download minpack sources
        if: ${{ matrix.USE_DOWNLOAD=='OFF' }}
        run: foreach ($current_file in "disclaimer",  "chkder.f",  "dogleg.f",  "dpmpar.f",  "enorm.f",  "fdjac1.f",  "fdjac2.f",  "hybrd1.f",  "hybrd.f",  "hybrj1.f",  "hybrj.f",  "lmder1.f",  "lmder.f",  "lmdif1.f",  "lmdif.f",  "lmpar.f",  "lmstr1.f",  "lmstr.f",  "qform.f",  "qrfac.f",  "qrsolv.f",  "r1mpyq.f",  "r1updt.f",  "rwupdt.f") { Copy-Item "assets\$current_file" "minpack-builder"; }
      
      - name: Setup both compilers for C and Fortran
        uses: fortran-lang/setup-fortran@v1
        id: setup-fortran
        with:
          compiler: ${{ matrix.TOOLCHAIN.COMPILER }}
          version: ${{ matrix.TOOLCHAIN.VERSION }}
      
      - name: Override C compiler to use ${{ matrix.C_COMPILER.VENDOR }} (${{ matrix.C_COMPILER.CC }})
        if: ${{ matrix.C_COMPILER.VENDOR!='Intel' }}
        run: |
          Add-Content $env:GITHUB_ENV "CC=${{ matrix.C_COMPILER.CC }}"
          Add-Content $env:GITHUB_ENV "CXX=${{ matrix.C_COMPILER.CXX }}"

      - name: Configure the build of minpack
        run: cmake -G "NMake Makefiles" -DBUILD_SHARED_LIBS=${{ matrix.BUILD_SHARED_LIBS }} -DBUILD_STATIC_LIBS=${{ matrix.BUILD_STATIC_LIBS }} -DCMAKE_BUILD_TYPE=${{ matrix.CMAKE_BUILD_TYPE }} -DUSE_DOWNLOAD=${{ matrix.USE_DOWNLOAD }} --install-prefix $env:MINPACK_INSTALLDIR -S minpack-builder -B $env:MINPACK_BUILDDIR
      
      - name: Build minpack
        run: cmake --build $env:MINPACK_BUILDDIR --config ${{ matrix.CMAKE_BUILD_TYPE }}
      
      - name: Install minpack
        run: cmake --install $env:MINPACK_BUILDDIR --config ${{ matrix.CMAKE_BUILD_TYPE }}

      - name: Checkout minpackex repository to minpackex directory
        uses: actions/checkout@v4
        with:
          path: minpackex
      
      - name: Set environment variables to build and install directories (minpackex)
        run: |
          Add-Content $env:GITHUB_ENV "MINPACKEX_BUILDDIR=$env:RUNNER_TEMP\minpackex-build"
          Add-Content $env:GITHUB_ENV "MINPACKEX_INSTALLDIR=$env:RUNNER_TEMP\minpackex-install"

      - name: Configure the build of minpackex
        run: cmake -G "NMake Makefiles" "-Dminpack_INCLUDE_DIR=$env:minpack_dep_inc_dir" "-Dminpack_LIBRARY_DIR=$env:minpack_dep_lib_dir" -DBUILD_TESTING=${{ matrix.BUILD_TESTS }} -DBUILD_SHARED_LIBS=${{ matrix.BUILD_SHARED_LIBS }} -DBUILD_STATIC_LIBS=${{ matrix.BUILD_STATIC_LIBS }} -DCMAKE_BUILD_TYPE=${{ matrix.CMAKE_BUILD_TYPE }} --install-prefix $env:MINPACKEX_INSTALLDIR -S minpackex -B $env:MINPACKEX_BUILDDIR

      - name: Build minpackex
        run: cmake --build $env:MINPACKEX_BUILDDIR --config ${{ matrix.CMAKE_BUILD_TYPE }}
      
      - name: Test minpackex
        run: ctest --test-dir $env:MINPACKEX_BUILDDIR -C ${{ matrix.CMAKE_BUILD_TYPE }}

      - name: Install minpackex
        run: cmake --install $env:MINPACKEX_BUILDDIR --config ${{ matrix.CMAKE_BUILD_TYPE }}

  msys2-using-minpack-as-cmake-package:
    name: minpackex with MSYS2 toolchain on Windows using minpack as CMake package
    runs-on: windows-latest
    strategy:
      matrix:
        USE_DOWNLOAD: ['OFF']
        CMAKE_BUILD_TYPE: ['Release', 'Debug']
        BUILD_SHARED_LIBS: ['ON', 'OFF']
        BUILD_STATIC_LIBS: ['ON', 'OFF']
        BUILD_TESTS: ['ON', 'OFF']
        MSYS2_CONFIG:
          - { sys: mingw64, env: x86_64, fc: gfortran, cc: gcc }
          - { sys: ucrt64, env: ucrt-x86_64, fc: gfortran, cc: gcc }
          - { sys: clang64, env: clang-x86_64, fc: flang, cc: clang }
        
        exclude:
          
          - BUILD_SHARED_LIBS: 'OFF'
            BUILD_STATIC_LIBS: 'OFF'
    
    env:
      # Fortran compiler + C compiler + GNU Make
      MSYS2_PACKAGES_TO_INSTALL: "mingw-w64-${{ matrix.MSYS2_CONFIG.env }}-cc mingw-w64-${{ matrix.MSYS2_CONFIG.env }}-fc mingw-w64-${{ matrix.MSYS2_CONFIG.env }}-make"

    steps:

      - name: Checkout minpack-builder assets
        uses: actions/checkout@v4
        if: ${{ matrix.USE_DOWNLOAD=='OFF' }}
        with:
          repository: luau-project/minpack-builder
          ref: assets-ci-v1
          path: assets
      
      - name: Checkout minpack-builder repository to minpack-builder directory
        uses: actions/checkout@v4
        with:
          repository: luau-project/minpack-builder
          path: minpack-builder
      
      # Here, instead of installing packages in the conventional way,
      # we grab a list of mirrors for the environment (${{ matrix.MSYS2_CONFIG.env }}),
      # then each package content is downloaded separetely from a different mirror.
      # After all packages have been downloaded to disk, we install them.
      #
      # This workaround takes place to avoid a kind of "flooding" on the main MSYS2
      # servers, due the amount of content we have to download in parallel builds.
      - name: Install Fortran compiler + C compiler + GNU Make
        run: |
          C:\msys64\usr\bin\bash.exe -lc "pacman -S ${{ env.MSYS2_PACKAGES_TO_INSTALL }} --print > /tmp/url.list"
          C:\msys64\usr\bin\bash.exe -lc "for e in `$(cat /tmp/url.list); do echo `$(basename `$e); done" > $env:RUNNER_TEMP\packages.list
          ((Get-Content C:\msys64\etc\pacman.d\mirrorlist.${{ matrix.MSYS2_CONFIG.sys }}).Replace("\r\n", "\n") -match "Server\s*=\s*([^\n]+)") -replace "Server\s*=\s*", "" > $env:RUNNER_TEMP\mirrors.list
          $mirrors_content = Get-Content $env:RUNNER_TEMP\mirrors.list;
          $number_of_mirrors = ($mirrors_content | Measure-Object -Line).Lines;
          $max_mirror = [int]$number_of_mirrors;
          $min_mirror = [int](3, $max_mirror, $number_of_mirrors | Measure-Object -Minimum).Minimum;
          $failed_mirrors = New-Object System.Collections.Generic.HashSet[string];
          $ProgressPreference = 'SilentlyContinue';
          [System.IO.File]::ReadAllLines((Get-Item $env:RUNNER_TEMP\packages.list).FullName) | ForEach-Object {
            $package = $_;
            $retries = 0;
            $success = $false;
            $max_retries = 10;
            $connection_timeout = 30;
            $read_timeout = 1;

            while ((-not $success) -and ($retries -lt $max_retries))
            {
              $mirror = [string]($mirrors_content)[(Get-Random -Minimum $min_mirror -Maximum $max_mirror)];

              if (-not $failed_mirrors.Contains($mirror))
              {
                $uri = "$mirror$package";

                if ($retries -gt 0)
                {
                  C:\msys64\usr\bin\bash.exe -lc "echo -e '\e[32mRetry[\e[33m$retries\e[37m / \e[31m$max_retries\e[32m] >> \e[37mDownloading \e[35m$package\e[37m from \e[36m$uri\e[37m'";
                }
                else
                {
                  Write-Host "Downloading $package from $uri";
                }

                try
                {
                  Invoke-WebRequest -Uri $uri -MaximumRetryCount 0 -ConnectionTimeoutSeconds $connection_timeout -OperationTimeoutSeconds $read_timeout -OutFile C:\msys64\tmp\$package;
                  $success = $true;
                }
                catch
                {
                  C:\msys64\usr\bin\bash.exe -lc "echo -e '\e[33mFailed to download $package from $mirror\e[37m'";
                  $added = $failed_mirrors.Add($mirror);
                  $retries++;
                }
              }
            }

            if (-not $success)
            {
              Write-Host "Failed to download $package";
              exit 1;
            }
          }
          C:\msys64\usr\bin\bash.exe -lc "pacman -U /tmp/*.pkg.tar.zst --noconfirm"

      - name: Add MSYS2 tools to system environment PATH, and set CC and FC environment variables
        run: |
          Add-Content $env:GITHUB_PATH "C:\msys64\${{ matrix.MSYS2_CONFIG.sys }}\bin"
          Add-Content $env:GITHUB_ENV "CC=${{ matrix.MSYS2_CONFIG.cc }}"
          Add-Content $env:GITHUB_ENV "FC=${{ matrix.MSYS2_CONFIG.fc }}"
      
      - name: Set environment variables to build and install directories (minpack)
        run: |
          Add-Content $env:GITHUB_ENV "MINPACK_BUILDDIR=$env:RUNNER_TEMP\minpack-build"
          Add-Content $env:GITHUB_ENV "MINPACK_INSTALLDIR=$env:RUNNER_TEMP\minpack-install"
          Add-Content $env:GITHUB_ENV ("MINPACK_PREFIX=" + "$env:RUNNER_TEMP\minpack-install".Replace("\", "/"))

      - name: Download minpack sources
        if: ${{ matrix.USE_DOWNLOAD=='OFF' }}
        run: foreach ($current_file in "disclaimer",  "chkder.f",  "dogleg.f",  "dpmpar.f",  "enorm.f",  "fdjac1.f",  "fdjac2.f",  "hybrd1.f",  "hybrd.f",  "hybrj1.f",  "hybrj.f",  "lmder1.f",  "lmder.f",  "lmdif1.f",  "lmdif.f",  "lmpar.f",  "lmstr1.f",  "lmstr.f",  "qform.f",  "qrfac.f",  "qrsolv.f",  "r1mpyq.f",  "r1updt.f",  "rwupdt.f") { Copy-Item "assets\$current_file" "minpack-builder"; }
        
      - name: Configure the build of minpack
        run: cmake -G "MinGW Makefiles" -DBUILD_SHARED_LIBS=${{ matrix.BUILD_SHARED_LIBS }} -DBUILD_STATIC_LIBS=${{ matrix.BUILD_STATIC_LIBS }} -DCMAKE_BUILD_TYPE=${{ matrix.CMAKE_BUILD_TYPE }} -DUSE_DOWNLOAD=${{ matrix.USE_DOWNLOAD }} --install-prefix $env:MINPACK_INSTALLDIR -S minpack-builder -B $env:MINPACK_BUILDDIR
      
      - name: Build minpack
        run: cmake --build $env:MINPACK_BUILDDIR --config ${{ matrix.CMAKE_BUILD_TYPE }}
      
      - name: Install minpack
        run: cmake --install $env:MINPACK_BUILDDIR --config ${{ matrix.CMAKE_BUILD_TYPE }}

      - name: Checkout minpackex repository to minpackex directory
        uses: actions/checkout@v4
        with:
          path: minpackex
      
      - name: Set environment variables to build and install directories (minpackex)
        run: |
          Add-Content $env:GITHUB_ENV "MINPACKEX_BUILDDIR=$env:RUNNER_TEMP\minpackex-build"
          Add-Content $env:GITHUB_ENV "MINPACKEX_INSTALLDIR=$env:RUNNER_TEMP\minpackex-install"

      - name: Configure the build of minpackex
        run: cmake -G "MinGW Makefiles" "-DCMAKE_PREFIX_PATH=$env:MINPACK_PREFIX" -DBUILD_TESTING=${{ matrix.BUILD_TESTS }} -DBUILD_SHARED_LIBS=${{ matrix.BUILD_SHARED_LIBS }} -DBUILD_STATIC_LIBS=${{ matrix.BUILD_STATIC_LIBS }} -DCMAKE_BUILD_TYPE=${{ matrix.CMAKE_BUILD_TYPE }} --install-prefix $env:MINPACKEX_INSTALLDIR -S minpackex -B $env:MINPACKEX_BUILDDIR

      - name: Build minpackex
        run: cmake --build $env:MINPACKEX_BUILDDIR --config ${{ matrix.CMAKE_BUILD_TYPE }}
      
      - name: Test minpackex
        run: ctest --test-dir $env:MINPACKEX_BUILDDIR -C ${{ matrix.CMAKE_BUILD_TYPE }}

      - name: Install minpackex
        run: cmake --install $env:MINPACKEX_BUILDDIR --config ${{ matrix.CMAKE_BUILD_TYPE }}

  msys2-using-minpack-as-system-library:
    name: minpackex with MSYS2 toolchain on Windows using minpack as system library
    runs-on: windows-latest
    strategy:
      matrix:
        USE_DOWNLOAD: ['OFF']
        CMAKE_BUILD_TYPE: ['Release', 'Debug']
        BUILD_SHARED_LIBS: ['ON', 'OFF']
        BUILD_STATIC_LIBS: ['ON', 'OFF']
        BUILD_TESTS: ['ON', 'OFF']
        MSYS2_CONFIG:
          - { sys: mingw64, env: x86_64, cc: gcc }
          - { sys: ucrt64, env: ucrt-x86_64, cc: gcc }
          - { sys: clang64, env: clang-x86_64, cc: clang }
        
        exclude:
          
          - BUILD_SHARED_LIBS: 'OFF'
            BUILD_STATIC_LIBS: 'OFF'

    env:
      # C compiler + GNU Make + libminpack
      MSYS2_PACKAGES_TO_INSTALL: "mingw-w64-${{ matrix.MSYS2_CONFIG.env }}-cc mingw-w64-${{ matrix.MSYS2_CONFIG.env }}-make mingw-w64-${{ matrix.MSYS2_CONFIG.env }}-libminpack"

    steps:

      # Here, instead of installing packages in the conventional way,
      # we grab a list of mirrors for the environment (${{ matrix.MSYS2_CONFIG.env }}),
      # then each package content is downloaded separetely from a different mirror.
      # After all packages have been downloaded to disk, we install them.
      #
      # This workaround takes place to avoid a kind of "flooding" on the main MSYS2
      # servers, due the amount of content we have to download in parallel builds.
      - name: Install C compiler + GNU Make + libminpack
        run: |
          C:\msys64\usr\bin\bash.exe -lc "pacman -S ${{ env.MSYS2_PACKAGES_TO_INSTALL }} --print > /tmp/url.list"
          C:\msys64\usr\bin\bash.exe -lc "for e in `$(cat /tmp/url.list); do echo `$(basename `$e); done" > $env:RUNNER_TEMP\packages.list
          ((Get-Content C:\msys64\etc\pacman.d\mirrorlist.${{ matrix.MSYS2_CONFIG.sys }}).Replace("\r\n", "\n") -match "Server\s*=\s*([^\n]+)") -replace "Server\s*=\s*", "" > $env:RUNNER_TEMP\mirrors.list
          $mirrors_content = Get-Content $env:RUNNER_TEMP\mirrors.list;
          $number_of_mirrors = ($mirrors_content | Measure-Object -Line).Lines;
          $max_mirror = [int]$number_of_mirrors;
          $min_mirror = [int](3, $max_mirror, $number_of_mirrors | Measure-Object -Minimum).Minimum;
          $failed_mirrors = New-Object System.Collections.Generic.HashSet[string];
          $ProgressPreference = 'SilentlyContinue';
          [System.IO.File]::ReadAllLines((Get-Item $env:RUNNER_TEMP\packages.list).FullName) | ForEach-Object {
            $package = $_;
            $retries = 0;
            $success = $false;
            $max_retries = 10;
            $connection_timeout = 30;
            $read_timeout = 1;

            while ((-not $success) -and ($retries -lt $max_retries))
            {
              $mirror = [string]($mirrors_content)[(Get-Random -Minimum $min_mirror -Maximum $max_mirror)];

              if (-not $failed_mirrors.Contains($mirror))
              {
                $uri = "$mirror$package";

                if ($retries -gt 0)
                {
                  C:\msys64\usr\bin\bash.exe -lc "echo -e '\e[32mRetry[\e[33m$retries\e[37m / \e[31m$max_retries\e[32m] >> \e[37mDownloading \e[35m$package\e[37m from \e[36m$uri\e[37m'";
                }
                else
                {
                  Write-Host "Downloading $package from $uri";
                }

                try
                {
                  Invoke-WebRequest -Uri $uri -MaximumRetryCount 0 -ConnectionTimeoutSeconds $connection_timeout -OperationTimeoutSeconds $read_timeout -OutFile C:\msys64\tmp\$package;
                  $success = $true;
                }
                catch
                {
                  C:\msys64\usr\bin\bash.exe -lc "echo -e '\e[33mFailed to download $package from $mirror\e[37m'";
                  $added = $failed_mirrors.Add($mirror);
                  $retries++;
                }
              }
            }

            if (-not $success)
            {
              Write-Host "Failed to download $package";
              exit 1;
            }
          }
          C:\msys64\usr\bin\bash.exe -lc "pacman -U /tmp/*.pkg.tar.zst --noconfirm"

      - name: Add MSYS2 tools to system environment PATH, set CC and MINPACK_PREFIX environment variables
        run: |
          Add-Content $env:GITHUB_PATH "C:\msys64\${{ matrix.MSYS2_CONFIG.sys }}\bin"
          Add-Content $env:GITHUB_ENV "CC=${{ matrix.MSYS2_CONFIG.cc }}"
          Add-Content $env:GITHUB_ENV ("MINPACK_PREFIX=" + "C:\msys64\${{ matrix.MSYS2_CONFIG.sys }}".Replace("\", "/"))
      
      - name: Checkout minpackex repository to minpackex directory
        uses: actions/checkout@v4
        with:
          path: minpackex
      
      - name: Set environment variables to build and install directories (minpackex)
        run: |
          Add-Content $env:GITHUB_ENV "MINPACKEX_BUILDDIR=$env:RUNNER_TEMP\minpackex-build"
          Add-Content $env:GITHUB_ENV "MINPACKEX_INSTALLDIR=$env:RUNNER_TEMP\minpackex-install"

      - name: Configure the build of minpackex
        run: cmake -G "MinGW Makefiles" "-DCMAKE_PREFIX_PATH=$env:MINPACK_PREFIX" -DBUILD_TESTING=${{ matrix.BUILD_TESTS }} -DBUILD_SHARED_LIBS=${{ matrix.BUILD_SHARED_LIBS }} -DBUILD_STATIC_LIBS=${{ matrix.BUILD_STATIC_LIBS }} -DCMAKE_BUILD_TYPE=${{ matrix.CMAKE_BUILD_TYPE }} --install-prefix $env:MINPACKEX_INSTALLDIR -S minpackex -B $env:MINPACKEX_BUILDDIR

      - name: Build minpackex
        run: cmake --build $env:MINPACKEX_BUILDDIR --config ${{ matrix.CMAKE_BUILD_TYPE }}
      
      - name: Test minpackex
        run: ctest --test-dir $env:MINPACKEX_BUILDDIR -C ${{ matrix.CMAKE_BUILD_TYPE }}

      - name: Install minpackex
        run: cmake --install $env:MINPACKEX_BUILDDIR --config ${{ matrix.CMAKE_BUILD_TYPE }}