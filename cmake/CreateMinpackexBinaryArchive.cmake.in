#                                                                                 #
#                                                                                 #
###################################################################################
# License                                                                         #
###################################################################################
#                                                                                 #
# Copyright (c) 2024 luau-project                                                 #
#                    https://github.com/luau-project/minpackex                    #
#                                                                                 #
# Redistribution and use in source and binary forms, with or without              #
# modification, are permitted provided that the following conditions are met:     #
#                                                                                 #
# 1. Redistributions of source code must retain the above copyright notice,       #
# this list of conditions and the following disclaimer.                           #
#                                                                                 #
# 2. Redistributions in binary form must reproduce the above copyright            #
# notice, this list of conditions and the following disclaimer in the             #
# documentation and/or other materials provided with the distribution.            #
#                                                                                 #
# 3. Neither the name of the copyright holder nor the names of its                #
# contributors may be used to endorse or promote products derived from this       #
# software without specific prior written permission.                             #
#                                                                                 #
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS”     #
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,           #
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR          #
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR               #
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,           #
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,             #
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;     #
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,        #
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR         #
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF          #
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                                      #
#                                                                                 #
###################################################################################
###################################################################################
##                                 Body                                          ##
###################################################################################
###################################################################################
#                                                                                 #
#                                                                                 #

if (NOT DEFINED MINPACKEX_ARCHIVE_FORMAT)
    message(FATAL_ERROR "Archive format not set.")
endif()

set(supported_archive_formats "zip" "gzip" "bzip2" "xz")

list(FIND supported_archive_formats "${MINPACKEX_ARCHIVE_FORMAT}" format_index)

if (format_index LESS 0)
    message(FATAL_ERROR "Unsupported archive format.")
endif()

if (EXISTS "@CMAKE_CURRENT_BINARY_DIR@/install_manifest.txt")
    file(STRINGS "@CMAKE_CURRENT_BINARY_DIR@/install_manifest.txt" MANIFEST_CONTENT)

    set(destination_archiving_dir "@CMAKE_CURRENT_BINARY_DIR@/@MINPACKEX_LIBRARY_NAME@-@PROJECT_VERSION@-binaries@BINARY_ARCHIVE_SUFFIX@")

    if ("${MINPACKEX_ARCHIVE_FORMAT}" STREQUAL "zip")
        set(destination_archive_file "${destination_archiving_dir}.zip")
    elseif ("${MINPACKEX_ARCHIVE_FORMAT}" STREQUAL "gzip")
        set(destination_archive_file "${destination_archiving_dir}.tar.gz")
    elseif ("${MINPACKEX_ARCHIVE_FORMAT}" STREQUAL "bzip2")
        set(destination_archive_file "${destination_archiving_dir}.tar.bz2")
    else() # "${MINPACKEX_ARCHIVE_FORMAT}" STREQUAL "xz"
        set(destination_archive_file "${destination_archiving_dir}.tar.xz")
    endif()

    if (EXISTS ${destination_archiving_dir})
        file(REMOVE_RECURSE ${destination_archiving_dir})
    endif()

    if (EXISTS ${destination_archive_file})
        file(REMOVE ${destination_archive_file})
    endif()

    file(MAKE_DIRECTORY ${destination_archiving_dir})

    string(LENGTH "@CMAKE_INSTALL_PREFIX@" __prefix_dir_length)

    foreach(line ${MANIFEST_CONTENT})
        if (DEFINED ENV{DESTDIR})
            set(__installed_file "$ENV{DESTDIR}${line}")
        else()
            set(__installed_file "${line}")
        endif()

        if (EXISTS ${__installed_file})
            message(STATUS "Archiving: ${__installed_file}")

            string(SUBSTRING ${line} ${__prefix_dir_length} "-1" __file_suffix)
            string(CONCAT target_copied_file "${destination_archiving_dir}" "${__file_suffix}")
    
            get_filename_component(target_copied_file_dir "${target_copied_file}" PATH)

            file(COPY ${__installed_file} DESTINATION "${target_copied_file_dir}")
        else()
            message(FATAL_ERROR "File not found for archiving: ${__installed_file}")
        endif()
    endforeach()

    if ("${MINPACKEX_ARCHIVE_FORMAT}" STREQUAL "zip")
        set(tar_format_flag "zip")
        set(tar_flag "c")
    elseif ("${MINPACKEX_ARCHIVE_FORMAT}" STREQUAL "gzip")
        set(tar_format_flag "gnutar")
        set(tar_flag "cz")
    elseif ("${MINPACKEX_ARCHIVE_FORMAT}" STREQUAL "bzip2")
        set(tar_format_flag "gnutar")
        set(tar_flag "cj")
    else() # "${MINPACKEX_ARCHIVE_FORMAT}" STREQUAL "xz"
        set(tar_format_flag "gnutar")
        set(tar_flag "cJ")
    endif()

    execute_process(
        COMMAND ${CMAKE_COMMAND} -E tar ${tar_flag} "${destination_archive_file}" --format=${tar_format_flag} -- ${destination_archiving_dir}
        RESULT_VARIABLE MINPACKEX_BINARY_ARCHIVE_RES
        ERROR_VARIABLE MINPACKEX_BINARY_ERR
    )

    if (MINPACKEX_BINARY_ARCHIVE_RES EQUAL 0)
        set(MINPACKEX_BINARY_ARCHIVE_HASHES "SHA256" "MD5")
        foreach (__hash ${MINPACKEX_BINARY_ARCHIVE_HASHES})
            file(${__hash} ${destination_archive_file} MINPACKEX_BINARY_ARCHIVE_HASH)
            file(WRITE "${destination_archive_file}-${__hash}.txt" "${MINPACKEX_BINARY_ARCHIVE_HASH}")
        endforeach()
    else()
        message(FATAL_ERROR "${MINPACKEX_BINARY_ERR}")
    endif()
else()
    message(FATAL_ERROR "Unable to archive, because the file @CMAKE_CURRENT_BINARY_DIR@/install_manifest.txt was not found.")
endif()